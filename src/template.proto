syntax = "proto3";
import "common.proto";
package types;

// AnalyzeTemplate represents the template definition of the Analyze service- for analyzing sensitive text.
message AnalyzeTemplate {
    // Array of the fields to analyze
    repeated FieldTypes fields = 1;
    // Optional flag to request all existing fields. if true, "fields" must be empty.
    bool allFields = 2;
    // Template description
    string description = 3;
    // Template Creation date
    string createTime = 4;
    // Template modification date
    string modifiedTime = 5;
    // Language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1
    string language = 6;
    // Threshold to filter results based on their score
    float resultsScoreThreshold = 7;
}


// AnonymizeTemplate represents the template definition of the Anonymize service for anonymizying the sensitive data 
message AnonymizeTemplate {
    // Template description
    string description = 1;
    // Template Creation date
    string createTime = 2;
    // Template modification date
    string modifiedTime = 3;
    // FieldTypeTransformation represents the transformation for an array of fields types
    repeated FieldTypeTransformation fieldTypeTransformations = 4;
    // The default transformation applied for undeclared fields
    Transformation defaultTransformation = 5;
}

// JsonSchemaTemplate represents the json template definition of the Anonymize service for anonymizying the sensitive data 
message JsonSchemaTemplate{
    // Template description
    string description = 1;
    // Template Creation date
    string createTime = 2;
    // Template modification date
    string modifiedTime = 3;
    // Json schema
    string jsonSchema = 4;
}

// FieldTypeTransformation represents the transformation for an array of fields types
message FieldTypeTransformation { 
    // The array of field types  
    repeated FieldTypes fields = 1;
    // The transformation for the array of fields
    Transformation transformation = 2;
}


// Transformation represents the transformation types - how the sensitive text will change
message Transformation {
    // Relace the text with the defined value
    ReplaceValue replaceValue = 2;
    // Redact the text 
    RedactValue redactValue = 3;
    // Hashes the text
    HashValue hashValue = 4;
    // Mask n characters of the text
    MaskValue maskValue = 5;
    // Encrypt/Decrypt the text
    FPEValue fPEValue = 6;
}

// Replace the value with the given new value. 
// For example: We met in Seattle.
// new value: <Location>
// replace to 'We met in <Location>'
message ReplaceValue {
  // The value to replace
  string newValue = 1;
}

// Redacts the given value. For example We met in Seattle would change to 'We me in '.
message RedactValue {
}

// Uses cryptographich hash on the given value with SHA-256 hash.
message HashValue {
}

// Mask the given value with the selected characters.
// For example: my credit card number is 4961-2765-5327-5913
// maskingCharacter: '*', chars to mask: 9, fromEnd: true
// Will output:  my credit card number is 4961-2765-*********
message MaskValue {
    // the masking char
    string maskingCharacter = 1;
    // number of chars to mask
    int32 charsToMask = 2;
    // Should start masking from end
    bool fromEnd = 3;
}

// Encrypt the given value with FFI alogrithm to presereve detected value size.
message FPEValue {
    // base64 encoded 128, 192, 256 size key
    string key = 1;
    // base64 encoded tweak. Size must be below 8 
    string tweak = 2;
    // true to decrypt value
    bool decrypt = 3;
}

// DBConfig represents the Database configuration - the DB connection string and the table name
// Supported database: mssql, mysql, sqlite3, postgreSQL, oracle
message DBConfig {
    // The database connection string
    string connectionString = 1;
    // The table name
    string tableName = 2;
    // The database type
    string type = 3;
}

// Datasink represents the configuration for storing the scanner output to the selected destination such as cloud storage, database, etc.
message Datasink {
    // The database configuration
    DBConfig dbConfig = 1;
    // The cloud storage configuration
    CloudStorageConfig cloudStorageConfig = 2;
    // The stream configuration
    StreamConfig streamConfig = 3;
}

// DatasinkTemplate represents the scanner service outputs definition.
message DatasinkTemplate {
    // Template description
    string description = 1;
    // Datasink represents the configuration for storing the scanner output.
    // Datasink can output both of the analyze and anonymize results and to multiple outputs
    // Supported outputs are CloudStorage: AWS S3, Azure Blob storage, Google Storage
    // Streams: Azure EventHub, Kafka
    // Database: MySql, SqlLite3, MSSQL, PostgreSQL
    repeated Datasink analyzeDatasink = 2;
    repeated Datasink anonymizeDatasink = 3;
}

// Azure Blob Storage configuration
message BlobStorageConfig {
    // Azure account name
    string accountName = 1;
    // Azure account key 
    string accountKey = 2;
    // The blob storage container Name
    string containerName = 3;
}

// AWS S3 configuration
message S3Config {
    // The access id
    string accessId = 1;
    // The access key
    string accessKey = 2;
    // The region
    string region = 3;
    // The bucket name
    string bucketName = 4;
    // The s3 endpoint
    string endpoint = 5;
}

// Represents the Google Storage configuration
message GoogleStorageConfig {
    // The json
    string json = 1;
    // The project id
    string projectId = 2;
    // The scopes authentication [there are different scopes, which you can find here https://cloud.google.com/storage/docs/authentication]
    string scopes = 3;
    // The bucket name
    string bucketName = 4;
}

// Represents the cloud storage config - supported storage: Azure blob storage, AWS S3, Google storage
message CloudStorageConfig {
    // The azure blob storage config
    BlobStorageConfig blobStorageConfig = 1;
    // The s3 config
    S3Config s3Config = 2;
    // The google storage config
    GoogleStorageConfig GoogleStorageConfig = 3; 
}

// Represents the streams configuration
message StreamConfig {
    // The kafka configuration
    KafkaConfig kafkaConfig = 1;
    // The Azure Event Hub configuration
    EHConfig ehConfig = 2;
    // Number of partitions if applicable
    int32 partitionCount = 3;
}

// The Kafka configuration
message KafkaConfig {
    // Kafka address
    string address = 1;
    // Kafka topic
    string topic = 2;
    // SASL authentication user name
    string saslUsername = 3;
    // SASL authentication password
    string saslPassword = 4;
}

// Azure EventHub configuration
message EHConfig {
    // EventHub namespace
    string ehNamespace = 1;
    // EventHub name
    string ehName = 2;
    // Eventhub connection string
    string ehConnectionString = 3;
    // Eventhub key name (a key name and a key value can provided instead of the full connection string)
    string ehKeyName = 4;
    // Eventhub key value
    string ehKeyValue = 5;
    // Storage account name value
    string storageAccountNameValue = 6;
    // Storage account key value
    string storageAccountKeyValue = 7;
    // Storage container  value
    string containerValue = 8;
}

// StreamTemplate represents the stream configuration for streaming data and analyzing/anonymizing it.
// And sending the output to the selected destination
message StreamTemplate {
    // The job name
    string name = 1;
    // Template description
    string description = 2;
    // The selected stream configuration
    StreamConfig streamConfig = 3;
    // The analyzer template id configures the fields to analyze
    string analyzeTemplateId = 4;
    // The anonymizer template id configures how to anonymize the sensitive data [optional]
    string anonymizeTemplateId = 5;
    // The datasinkTemplateId configures the output destination of the analyzer/anonymizer results
    string datasinkTemplateId = 6;
}

// ScanTemplate represents the scan configuration for scanning data and analyzing/anonymizing it.
// And sending the output to the selected destination
message ScanTemplate {
    // Template description
    string description = 1;
    // The selected cloud storage configuration
    CloudStorageConfig cloudStorageConfig = 2;
}

// The kuberenetes Cronjob template. Creates a time based scanning job scheduler that runs periodcally
// on the selected time
message ScannerCronJobTemplate {
    // The job name
    string name = 1;
    // The job description
    string description = 2;
    // The trigger for a new job to start
    Trigger trigger = 3;
    // The scan template id configures job input source
    string scanTemplateId = 4;
    // The analyzer template id configures the fields to analyze
    string analyzeTemplateId = 5;
    // The anonymizer template id configures how to anonymize the sensitive data [optional]
    string anonymizeTemplateId = 6;
    // The datasink template id configures the output destination of the analyzer/anonymizer results
    string datasinkTemplateId = 7;
}

// The kuberenetes job template. Creates a job that creates streams containers
message StreamsJobTemplate {
    // The job name
    string name = 1;
    // The job description
    string description = 2;
    // The scan template id configures job input source
    string streamsTemplateId = 3;
    // The analyzer template id configures the fields to analyze
    string analyzeTemplateId = 4;
    // The anonymizer template id configures how to anonymize the sensitive data [optional]
    string anonymizeTemplateId = 5;
    // The datasink template id configures the output destination of the analyzer/anonymizer results
    string datasinkTemplateId = 6;
}

// Trigger defines the trigger for a new job to start
message Trigger {
    // Defines the job schedule
    Schedule schedule = 1;
}

// Defines the job schedule
message Schedule {
    // The recurrence period of the job, set as a cron expression
    string recurrencePeriod = 1;
}

// AnonymizeImageTemplate represents the template definition of the Anonymize image service
message AnonymizeImageTemplate {
    // Template description
    string description = 1;
    // Template Creation date
    string createTime = 2;
    // Template modification date
    string modifiedTime = 3;
    // FieldTypeGraphic represents the graphics for an array of fields types
    repeated FieldTypeGraphic fieldTypeGraphics= 4;
}

// FieldTypeGraphic represents the graphics for an array of fields types
message FieldTypeGraphic { 
    // The array of field types  
    repeated FieldTypes fields = 1;
    // The graphics for the array of fields
    Graphic graphic = 2;
}


// Graphic represents how the sensitive content will be transforms
message Graphic {
    // Fill the bbox with a color
    FillColorValue fillColorValue = 1;
}

// Fill the bbox with a color
message FillColorValue {
    // 0 - 255
    double red = 1;
    // 0 - 255
    double green = 2;
    // 0 - 255
    double blue = 3;
}