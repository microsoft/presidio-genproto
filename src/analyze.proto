syntax = "proto3";
import "common.proto";
import "template.proto";

package types;

// AnalyzeApiRequest represents the request to the API HTTP service 
message AnalyzeApiRequest {
  // The text to analyze
  string text = 1;
  // The analyze template id - that hold the analyze configuration
  string analyzeTemplateId = 2;
  // Optional parameter (if template id was not provided) for running the analyze service without creating a template 
  AnalyzeTemplate analyzeTemplate = 3;
}

// Recognizer represents a known or custom recognizer
message Recognizer {
  // The name of the recognizer, unique
  string name = 1;
  // The entity names which this recognizer can detect
  repeated string entities = 2;
  // The supported language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1
  string language = 3;
}


// AnalyzeRequest represents the request to the analyze service via GRPC 
message AnalyzeRequest {
  // The text to analyze
  string text = 1;
  // The analyze template, which configures which sensitive data should be analyzed
  AnalyzeTemplate analyzeTemplate = 2;
}


// AnalyzeResponse represents the analyze service response
message AnalyzeResponse{
  // Array of the analyze results finding
  repeated AnalyzeResult analyzeResults = 1;
  // The assigned analysis request id, can be used to correlate logs
  string requestId = 2;
}

// RecognizersAllRequest represents the request to get the recognizers
// known to the analyze service that support the input language via GRPC 
message RecognizersAllRequest {
  // The supported language code, in ISO-639 format, https://en.wikipedia.org/wiki/ISO_639-1
  string language = 3;
}

// RecognizersResponse represents the analyze service response
message RecognizersAllResponse{
  // Array of the recognizers
  repeated Recognizer recognizerResults = 1;
}

// The Analyze Service is a service that analyze a given the text using predefined analyzers fields to identify patterns, 
// formats, and checksums with relevant context.
service AnalyzeService {
  // Apply method will execute on the given request and return the analyze response with the sensitive text findings
  rpc Apply (AnalyzeRequest) returns (AnalyzeResponse) {}
  // Gets the list of known recognizers.
  rpc GetAllRecognizers (RecognizersAllRequest) returns (RecognizersAllResponse) {}
}
