// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ocr.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OcrRequest represents the request to the anonymize service via GRPC
type OcrRequest struct {
	// The image to ocr
	Image                *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OcrRequest) Reset()         { *m = OcrRequest{} }
func (m *OcrRequest) String() string { return proto.CompactTextString(m) }
func (*OcrRequest) ProtoMessage()    {}
func (*OcrRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocr_e17f88a6a2ce8524, []int{0}
}
func (m *OcrRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrRequest.Unmarshal(m, b)
}
func (m *OcrRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrRequest.Marshal(b, m, deterministic)
}
func (dst *OcrRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrRequest.Merge(dst, src)
}
func (m *OcrRequest) XXX_Size() int {
	return xxx_messageInfo_OcrRequest.Size(m)
}
func (m *OcrRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OcrRequest proto.InternalMessageInfo

func (m *OcrRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

// OcrResponse represents the anonymize service response
type OcrResponse struct {
	// The image detected bboxes
	Image                *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OcrResponse) Reset()         { *m = OcrResponse{} }
func (m *OcrResponse) String() string { return proto.CompactTextString(m) }
func (*OcrResponse) ProtoMessage()    {}
func (*OcrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ocr_e17f88a6a2ce8524, []int{1}
}
func (m *OcrResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OcrResponse.Unmarshal(m, b)
}
func (m *OcrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OcrResponse.Marshal(b, m, deterministic)
}
func (dst *OcrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OcrResponse.Merge(dst, src)
}
func (m *OcrResponse) XXX_Size() int {
	return xxx_messageInfo_OcrResponse.Size(m)
}
func (m *OcrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OcrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OcrResponse proto.InternalMessageInfo

func (m *OcrResponse) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*OcrRequest)(nil), "types.OcrRequest")
	proto.RegisterType((*OcrResponse)(nil), "types.OcrResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OcrServiceClient is the client API for OcrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OcrServiceClient interface {
	// Apply method will execute on the given request and return the anonymize response with the sensitive text anonymized
	Apply(ctx context.Context, in *OcrRequest, opts ...grpc.CallOption) (*OcrResponse, error)
}

type ocrServiceClient struct {
	cc *grpc.ClientConn
}

func NewOcrServiceClient(cc *grpc.ClientConn) OcrServiceClient {
	return &ocrServiceClient{cc}
}

func (c *ocrServiceClient) Apply(ctx context.Context, in *OcrRequest, opts ...grpc.CallOption) (*OcrResponse, error) {
	out := new(OcrResponse)
	err := c.cc.Invoke(ctx, "/types.OcrService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcrServiceServer is the server API for OcrService service.
type OcrServiceServer interface {
	// Apply method will execute on the given request and return the anonymize response with the sensitive text anonymized
	Apply(context.Context, *OcrRequest) (*OcrResponse, error)
}

func RegisterOcrServiceServer(s *grpc.Server, srv OcrServiceServer) {
	s.RegisterService(&_OcrService_serviceDesc, srv)
}

func _OcrService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.OcrService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServiceServer).Apply(ctx, req.(*OcrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OcrService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.OcrService",
	HandlerType: (*OcrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _OcrService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocr.proto",
}

func init() { proto.RegisterFile("ocr.proto", fileDescriptor_ocr_e17f88a6a2ce8524) }

var fileDescriptor_ocr_e17f88a6a2ce8524 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x4f, 0x2e, 0xd2,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0xa9, 0x2c, 0x48, 0x2d, 0x96, 0xe2, 0x49, 0xce,
	0xcf, 0xcd, 0xcd, 0xcf, 0x83, 0x08, 0x2a, 0x19, 0x70, 0x71, 0xf9, 0x27, 0x17, 0x05, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x29, 0x71, 0xb1, 0x66, 0xe6, 0x26, 0xa6, 0xa7, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x1b, 0xf1, 0xe8, 0x81, 0xb5, 0xe8, 0x79, 0x82, 0xc4, 0x82, 0x20, 0x52, 0x4a,
	0x86, 0x5c, 0xdc, 0x60, 0x1d, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xc4, 0x68, 0x31, 0xb2, 0x03,
	0x5b, 0x12, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c, 0x2a, 0x64, 0xc0, 0xc5, 0xea, 0x58, 0x50, 0x90,
	0x53, 0x29, 0x24, 0x08, 0x55, 0x8b, 0x70, 0x80, 0x94, 0x10, 0xb2, 0x10, 0xc4, 0x06, 0x25, 0x86,
	0x24, 0x36, 0xb0, 0x5b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x17, 0x69, 0x42, 0xcd,
	0x00, 0x00, 0x00,
}
