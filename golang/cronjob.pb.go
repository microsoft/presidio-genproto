// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cronjob.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CronJobApiRequest represents the request to the API HTTP service
type CronJobApiRequest struct {
	// The scannert cron job template id
	CronJobTemplateId    string   `protobuf:"bytes,1,opt,name=CronJobTemplateId,json=cronJobTemplateId,proto3" json:"CronJobTemplateId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronJobApiRequest) Reset()         { *m = CronJobApiRequest{} }
func (m *CronJobApiRequest) String() string { return proto.CompactTextString(m) }
func (*CronJobApiRequest) ProtoMessage()    {}
func (*CronJobApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cronjob_b8af22718c9fd2c9, []int{0}
}
func (m *CronJobApiRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJobApiRequest.Unmarshal(m, b)
}
func (m *CronJobApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJobApiRequest.Marshal(b, m, deterministic)
}
func (dst *CronJobApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobApiRequest.Merge(dst, src)
}
func (m *CronJobApiRequest) XXX_Size() int {
	return xxx_messageInfo_CronJobApiRequest.Size(m)
}
func (m *CronJobApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobApiRequest proto.InternalMessageInfo

func (m *CronJobApiRequest) GetCronJobTemplateId() string {
	if m != nil {
		return m.CronJobTemplateId
	}
	return ""
}

// CronJobRequest represents the request to the scheduler service via GRPC
type CronJobRequest struct {
	// The cron job description
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// The trigger for a new job to start
	Trigger *Trigger `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	// The scanner requeset that hold the scanning details
	ScanRequest          *ScanRequest `protobuf:"bytes,3,opt,name=scanRequest,proto3" json:"scanRequest,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CronJobRequest) Reset()         { *m = CronJobRequest{} }
func (m *CronJobRequest) String() string { return proto.CompactTextString(m) }
func (*CronJobRequest) ProtoMessage()    {}
func (*CronJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cronjob_b8af22718c9fd2c9, []int{1}
}
func (m *CronJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJobRequest.Unmarshal(m, b)
}
func (m *CronJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJobRequest.Marshal(b, m, deterministic)
}
func (dst *CronJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobRequest.Merge(dst, src)
}
func (m *CronJobRequest) XXX_Size() int {
	return xxx_messageInfo_CronJobRequest.Size(m)
}
func (m *CronJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobRequest proto.InternalMessageInfo

func (m *CronJobRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CronJobRequest) GetTrigger() *Trigger {
	if m != nil {
		return m.Trigger
	}
	return nil
}

func (m *CronJobRequest) GetScanRequest() *ScanRequest {
	if m != nil {
		return m.ScanRequest
	}
	return nil
}

type CronJobResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronJobResponse) Reset()         { *m = CronJobResponse{} }
func (m *CronJobResponse) String() string { return proto.CompactTextString(m) }
func (*CronJobResponse) ProtoMessage()    {}
func (*CronJobResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cronjob_b8af22718c9fd2c9, []int{2}
}
func (m *CronJobResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronJobResponse.Unmarshal(m, b)
}
func (m *CronJobResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronJobResponse.Marshal(b, m, deterministic)
}
func (dst *CronJobResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronJobResponse.Merge(dst, src)
}
func (m *CronJobResponse) XXX_Size() int {
	return xxx_messageInfo_CronJobResponse.Size(m)
}
func (m *CronJobResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CronJobResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CronJobResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CronJobApiRequest)(nil), "types.CronJobApiRequest")
	proto.RegisterType((*CronJobRequest)(nil), "types.CronJobRequest")
	proto.RegisterType((*CronJobResponse)(nil), "types.CronJobResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CronJobServiceClient is the client API for CronJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronJobServiceClient interface {
	// Apply method will trigger a new scanning cron job and will return if it was triggered successfully
	Apply(ctx context.Context, in *CronJobRequest, opts ...grpc.CallOption) (*CronJobResponse, error)
}

type cronJobServiceClient struct {
	cc *grpc.ClientConn
}

func NewCronJobServiceClient(cc *grpc.ClientConn) CronJobServiceClient {
	return &cronJobServiceClient{cc}
}

func (c *cronJobServiceClient) Apply(ctx context.Context, in *CronJobRequest, opts ...grpc.CallOption) (*CronJobResponse, error) {
	out := new(CronJobResponse)
	err := c.cc.Invoke(ctx, "/types.CronJobService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronJobServiceServer is the server API for CronJobService service.
type CronJobServiceServer interface {
	// Apply method will trigger a new scanning cron job and will return if it was triggered successfully
	Apply(context.Context, *CronJobRequest) (*CronJobResponse, error)
}

func RegisterCronJobServiceServer(s *grpc.Server, srv CronJobServiceServer) {
	s.RegisterService(&_CronJobService_serviceDesc, srv)
}

func _CronJobService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.CronJobService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServiceServer).Apply(ctx, req.(*CronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronJobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.CronJobService",
	HandlerType: (*CronJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _CronJobService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cronjob.proto",
}

func init() { proto.RegisterFile("cronjob.proto", fileDescriptor_cronjob_b8af22718c9fd2c9) }

var fileDescriptor_cronjob_b8af22718c9fd2c9 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x09, 0xa8, 0x20, 0x2e, 0x22, 0x28, 0x96, 0x40, 0x51, 0xa6, 0xc8, 0x53, 0x06, 0x94,
	0xa1, 0x30, 0xb0, 0x46, 0x4c, 0x74, 0x74, 0xfb, 0x02, 0x8d, 0x7b, 0xaa, 0x8c, 0x8a, 0xef, 0xb0,
	0x0d, 0x52, 0x5f, 0x83, 0x27, 0x46, 0xc4, 0x6e, 0x28, 0xdd, 0xac, 0xdf, 0xf7, 0x47, 0x9f, 0x0f,
	0x6e, 0xb4, 0x23, 0xfb, 0x46, 0x43, 0xc7, 0x8e, 0x02, 0x89, 0x59, 0xd8, 0x33, 0xfa, 0xba, 0x08,
	0xf8, 0xce, 0xbb, 0x75, 0xc0, 0x88, 0x6b, 0xf0, 0x7a, 0x6d, 0xe3, 0x5b, 0xf6, 0x50, 0xbe, 0x38,
	0xb2, 0x0b, 0x1a, 0x7a, 0x36, 0x0a, 0x3f, 0x3e, 0xd1, 0x07, 0xf1, 0x30, 0xc1, 0x55, 0x4a, 0xbe,
	0x6e, 0xaa, 0xac, 0xc9, 0xda, 0x6b, 0x55, 0xea, 0x53, 0x41, 0x7e, 0x67, 0x50, 0x24, 0xfb, 0xa1,
	0xa0, 0x81, 0x7c, 0x83, 0x5e, 0x3b, 0xc3, 0xc1, 0x90, 0x4d, 0xd1, 0x63, 0x24, 0x5a, 0xb8, 0x0a,
	0xce, 0x6c, 0xb7, 0xe8, 0xaa, 0xf3, 0x26, 0x6b, 0xf3, 0x79, 0xd1, 0x8d, 0x63, 0xbb, 0x55, 0xa4,
	0xea, 0x20, 0x8b, 0x27, 0xc8, 0x7f, 0xf7, 0xa6, 0xea, 0xea, 0x62, 0x74, 0x8b, 0xe4, 0x5e, 0xfe,
	0x29, 0xea, 0xd8, 0x26, 0x4b, 0xb8, 0x9d, 0x36, 0x79, 0x26, 0xeb, 0x71, 0xbe, 0x98, 0x66, 0x2e,
	0xd1, 0x7d, 0x19, 0x8d, 0xe2, 0x19, 0x66, 0x3d, 0xf3, 0x6e, 0x2f, 0xee, 0x52, 0xdd, 0xff, 0x6f,
	0xd4, 0xf7, 0xa7, 0x38, 0x36, 0xc9, 0xb3, 0xe1, 0x72, 0xbc, 0xde, 0xe3, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xda, 0x26, 0x00, 0x1f, 0x71, 0x01, 0x00, 0x00,
}
