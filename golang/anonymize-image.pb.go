// Code generated by protoc-gen-go. DO NOT EDIT.
// source: anonymize-image.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AnonymizeApiRequest represents the request to the API HTTP service
type AnonymizeImageApiRequest struct {
	// The image data to anonymize in bytes format
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The image type JPEG/PNG/TIFF
	ImageType string `protobuf:"bytes,2,opt,name=imageType,proto3" json:"imageType,omitempty"`
	// The analyze template id - anonymization is done according to analyzing results.
	// One of analyzeTemplateId or analyzeTemplate have to be configured.
	AnalyzeTemplateId string `protobuf:"bytes,3,opt,name=analyzeTemplateId,proto3" json:"analyzeTemplateId,omitempty"`
	// The anonymize image template id - represents the anonymize configuration, which fields to anonymize and how.
	AnonymizeImageTemplateId string `protobuf:"bytes,4,opt,name=anonymizeImageTemplateId,proto3" json:"anonymizeImageTemplateId,omitempty"`
	// Optional parameter for running the analyzer without creating a template.
	AnalyzeTemplate *AnalyzeTemplate `protobuf:"bytes,5,opt,name=analyzeTemplate,proto3" json:"analyzeTemplate,omitempty"`
	// Optional parameter for running the anonymize image without creating a template.
	AnonymizeImageTemplate *AnonymizeImageTemplate `protobuf:"bytes,6,opt,name=anonymizeImageTemplate,proto3" json:"anonymizeImageTemplate,omitempty"`
	// Anoymize image type detection OCR / Azure OCR / Azure Face
	DetectionType        DetectionTypeEnum `protobuf:"varint,7,opt,name=detectionType,proto3,enum=types.DetectionTypeEnum" json:"detectionType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AnonymizeImageApiRequest) Reset()         { *m = AnonymizeImageApiRequest{} }
func (m *AnonymizeImageApiRequest) String() string { return proto.CompactTextString(m) }
func (*AnonymizeImageApiRequest) ProtoMessage()    {}
func (*AnonymizeImageApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_anonymize_image_14f1a391a254965a, []int{0}
}
func (m *AnonymizeImageApiRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnonymizeImageApiRequest.Unmarshal(m, b)
}
func (m *AnonymizeImageApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnonymizeImageApiRequest.Marshal(b, m, deterministic)
}
func (dst *AnonymizeImageApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeImageApiRequest.Merge(dst, src)
}
func (m *AnonymizeImageApiRequest) XXX_Size() int {
	return xxx_messageInfo_AnonymizeImageApiRequest.Size(m)
}
func (m *AnonymizeImageApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeImageApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeImageApiRequest proto.InternalMessageInfo

func (m *AnonymizeImageApiRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AnonymizeImageApiRequest) GetImageType() string {
	if m != nil {
		return m.ImageType
	}
	return ""
}

func (m *AnonymizeImageApiRequest) GetAnalyzeTemplateId() string {
	if m != nil {
		return m.AnalyzeTemplateId
	}
	return ""
}

func (m *AnonymizeImageApiRequest) GetAnonymizeImageTemplateId() string {
	if m != nil {
		return m.AnonymizeImageTemplateId
	}
	return ""
}

func (m *AnonymizeImageApiRequest) GetAnalyzeTemplate() *AnalyzeTemplate {
	if m != nil {
		return m.AnalyzeTemplate
	}
	return nil
}

func (m *AnonymizeImageApiRequest) GetAnonymizeImageTemplate() *AnonymizeImageTemplate {
	if m != nil {
		return m.AnonymizeImageTemplate
	}
	return nil
}

func (m *AnonymizeImageApiRequest) GetDetectionType() DetectionTypeEnum {
	if m != nil {
		return m.DetectionType
	}
	return DetectionTypeEnum_OCR
}

// AnonymizeRequest represents the request to the anonymize service via GRPC
type AnonymizeImageRequest struct {
	// The Image to anonymize
	Image *Image `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// The anonymize template represent the anonymize configuration, which fields to anonymize and how
	Template *AnonymizeImageTemplate `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	// Anoymize image detection type  OCR / Azure OCR / Azure Face
	DetectionType DetectionTypeEnum `protobuf:"varint,3,opt,name=detectionType,proto3,enum=types.DetectionTypeEnum" json:"detectionType,omitempty"`
	// The analyze result containing the field type and location of the sensetive data to be anonymized.
	AnalyzeResults       []*AnalyzeResult `protobuf:"bytes,4,rep,name=analyzeResults,proto3" json:"analyzeResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AnonymizeImageRequest) Reset()         { *m = AnonymizeImageRequest{} }
func (m *AnonymizeImageRequest) String() string { return proto.CompactTextString(m) }
func (*AnonymizeImageRequest) ProtoMessage()    {}
func (*AnonymizeImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_anonymize_image_14f1a391a254965a, []int{1}
}
func (m *AnonymizeImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnonymizeImageRequest.Unmarshal(m, b)
}
func (m *AnonymizeImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnonymizeImageRequest.Marshal(b, m, deterministic)
}
func (dst *AnonymizeImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeImageRequest.Merge(dst, src)
}
func (m *AnonymizeImageRequest) XXX_Size() int {
	return xxx_messageInfo_AnonymizeImageRequest.Size(m)
}
func (m *AnonymizeImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeImageRequest proto.InternalMessageInfo

func (m *AnonymizeImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *AnonymizeImageRequest) GetTemplate() *AnonymizeImageTemplate {
	if m != nil {
		return m.Template
	}
	return nil
}

func (m *AnonymizeImageRequest) GetDetectionType() DetectionTypeEnum {
	if m != nil {
		return m.DetectionType
	}
	return DetectionTypeEnum_OCR
}

func (m *AnonymizeImageRequest) GetAnalyzeResults() []*AnalyzeResult {
	if m != nil {
		return m.AnalyzeResults
	}
	return nil
}

// AnonymizeResponse represents the anonymize service response
type AnonymizeImageResponse struct {
	Image                *Image   `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnonymizeImageResponse) Reset()         { *m = AnonymizeImageResponse{} }
func (m *AnonymizeImageResponse) String() string { return proto.CompactTextString(m) }
func (*AnonymizeImageResponse) ProtoMessage()    {}
func (*AnonymizeImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_anonymize_image_14f1a391a254965a, []int{2}
}
func (m *AnonymizeImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnonymizeImageResponse.Unmarshal(m, b)
}
func (m *AnonymizeImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnonymizeImageResponse.Marshal(b, m, deterministic)
}
func (dst *AnonymizeImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnonymizeImageResponse.Merge(dst, src)
}
func (m *AnonymizeImageResponse) XXX_Size() int {
	return xxx_messageInfo_AnonymizeImageResponse.Size(m)
}
func (m *AnonymizeImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnonymizeImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnonymizeImageResponse proto.InternalMessageInfo

func (m *AnonymizeImageResponse) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*AnonymizeImageApiRequest)(nil), "types.AnonymizeImageApiRequest")
	proto.RegisterType((*AnonymizeImageRequest)(nil), "types.AnonymizeImageRequest")
	proto.RegisterType((*AnonymizeImageResponse)(nil), "types.AnonymizeImageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnonymizeImageServiceClient is the client API for AnonymizeImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnonymizeImageServiceClient interface {
	// Apply method will execute on the given request and return the anonymize response with the sensitive text anonymized
	Apply(ctx context.Context, in *AnonymizeImageRequest, opts ...grpc.CallOption) (*AnonymizeImageResponse, error)
}

type anonymizeImageServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnonymizeImageServiceClient(cc *grpc.ClientConn) AnonymizeImageServiceClient {
	return &anonymizeImageServiceClient{cc}
}

func (c *anonymizeImageServiceClient) Apply(ctx context.Context, in *AnonymizeImageRequest, opts ...grpc.CallOption) (*AnonymizeImageResponse, error) {
	out := new(AnonymizeImageResponse)
	err := c.cc.Invoke(ctx, "/types.AnonymizeImageService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnonymizeImageServiceServer is the server API for AnonymizeImageService service.
type AnonymizeImageServiceServer interface {
	// Apply method will execute on the given request and return the anonymize response with the sensitive text anonymized
	Apply(context.Context, *AnonymizeImageRequest) (*AnonymizeImageResponse, error)
}

func RegisterAnonymizeImageServiceServer(s *grpc.Server, srv AnonymizeImageServiceServer) {
	s.RegisterService(&_AnonymizeImageService_serviceDesc, srv)
}

func _AnonymizeImageService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnonymizeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnonymizeImageServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AnonymizeImageService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnonymizeImageServiceServer).Apply(ctx, req.(*AnonymizeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnonymizeImageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.AnonymizeImageService",
	HandlerType: (*AnonymizeImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _AnonymizeImageService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anonymize-image.proto",
}

func init() {
	proto.RegisterFile("anonymize-image.proto", fileDescriptor_anonymize_image_14f1a391a254965a)
}

var fileDescriptor_anonymize_image_14f1a391a254965a = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0xcf, 0x4e, 0xfa, 0x40,
	0x10, 0xfe, 0xf1, 0x2b, 0x45, 0x19, 0x10, 0xe3, 0x44, 0xc8, 0x86, 0x40, 0x62, 0x7a, 0xf2, 0xa0,
	0x1c, 0xea, 0x49, 0x43, 0x8c, 0x4d, 0xd4, 0x84, 0xeb, 0x8a, 0x67, 0xb3, 0xc2, 0xc4, 0x34, 0x69,
	0xbb, 0x2b, 0x5d, 0x4c, 0xca, 0x4b, 0xf8, 0xb2, 0x3e, 0x80, 0x75, 0x5b, 0x90, 0x16, 0x88, 0x7a,
	0x6b, 0xf6, 0xfb, 0x33, 0x33, 0xdf, 0x97, 0x42, 0x5b, 0x44, 0x32, 0x4a, 0x42, 0x7f, 0x41, 0xe7,
	0x7e, 0x28, 0x5e, 0x68, 0xa0, 0x66, 0x52, 0x4b, 0xb4, 0x75, 0xa2, 0x28, 0xee, 0x36, 0x27, 0x32,
	0x0c, 0x65, 0x94, 0x3d, 0x76, 0x5b, 0x9a, 0x42, 0x15, 0x08, 0x9d, 0x93, 0x9c, 0x77, 0x0b, 0x98,
	0xb7, 0x94, 0x8f, 0xbe, 0xd4, 0x9e, 0xf2, 0x39, 0xbd, 0xce, 0x29, 0xd6, 0x88, 0x50, 0x9d, 0x0a,
	0x2d, 0x58, 0xe5, 0xa4, 0x72, 0xda, 0xe4, 0xe6, 0x1b, 0x7b, 0x50, 0x37, 0x43, 0xc6, 0xa9, 0x39,
	0xfb, 0x9f, 0x02, 0x75, 0xfe, 0xfd, 0x80, 0x67, 0x70, 0x24, 0x22, 0x11, 0x24, 0x0b, 0x1a, 0xe7,
	0x73, 0x46, 0x53, 0x66, 0x19, 0xd6, 0x26, 0x80, 0x57, 0xc0, 0x44, 0x61, 0xf6, 0x9a, 0xa8, 0x6a,
	0x44, 0x3b, 0x71, 0xbc, 0x81, 0xc3, 0x92, 0x21, 0xb3, 0x53, 0x49, 0xc3, 0xed, 0x0c, 0xcc, 0xdd,
	0x03, 0xaf, 0x88, 0xf2, 0x32, 0x1d, 0x1f, 0xa1, 0xb3, 0xdd, 0x9d, 0xd5, 0x8c, 0x51, 0x7f, 0x65,
	0xb4, 0x8d, 0xc4, 0x77, 0x88, 0xf1, 0x1a, 0x0e, 0xa6, 0xa4, 0x69, 0xa2, 0x7d, 0x19, 0x99, 0x90,
	0xf6, 0x52, 0xb7, 0x96, 0xcb, 0x72, 0xb7, 0xdb, 0x75, 0xec, 0x2e, 0x9a, 0x87, 0xbc, 0x48, 0x77,
	0x3e, 0x2a, 0xd0, 0x2e, 0x8e, 0x5c, 0xd6, 0xe1, 0x80, 0x6d, 0x92, 0x36, 0x7d, 0x34, 0xdc, 0x66,
	0xee, 0x98, 0x71, 0x32, 0x08, 0x2f, 0x61, 0x7f, 0xd9, 0xb0, 0x69, 0xe7, 0xc7, 0x33, 0x56, 0xf4,
	0xcd, 0xc5, 0xad, 0x3f, 0x2d, 0x8e, 0x43, 0x68, 0xe5, 0x11, 0x73, 0x8a, 0xe7, 0x81, 0x8e, 0xd3,
	0x0e, 0xad, 0x74, 0x81, 0xe3, 0x62, 0x21, 0x19, 0xc8, 0x4b, 0x5c, 0x67, 0x08, 0x9d, 0xf2, 0xd5,
	0xb1, 0x92, 0x51, 0x4c, 0xbf, 0x39, 0xdb, 0x7d, 0x2a, 0x67, 0xf6, 0x40, 0xb3, 0x37, 0x7f, 0x42,
	0x78, 0x0f, 0xb6, 0xa7, 0x54, 0x90, 0x60, 0x6f, 0x6b, 0x0c, 0x79, 0xb4, 0xdd, 0xfe, 0x0e, 0x34,
	0x5b, 0xc1, 0xf9, 0xf7, 0x5c, 0x33, 0xbf, 0xcb, 0xc5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x70,
	0x3f, 0x90, 0x84, 0x6c, 0x03, 0x00, 0x00,
}
