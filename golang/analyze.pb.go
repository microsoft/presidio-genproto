// Code generated by protoc-gen-go. DO NOT EDIT.
// source: analyze.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// AnalyzeApiRequest represents the request to the API HTTP service
type AnalyzeApiRequest struct {
	// The text to analyze
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The analyze template id - that hold the analyze configuration
	AnalyzeTemplateId string `protobuf:"bytes,2,opt,name=analyzeTemplateId,proto3" json:"analyzeTemplateId,omitempty"`
	// Optional parameter (if template id was not provided) for running the analyze service without creating a template
	AnalyzeTemplate *AnalyzeTemplate `protobuf:"bytes,3,opt,name=analyzeTemplate,proto3" json:"analyzeTemplate,omitempty"`
	// Threshold to filter results based on their score
	ResultsScoreThreshold float32  `protobuf:"fixed32,4,opt,name=resultsScoreThreshold,proto3" json:"resultsScoreThreshold,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *AnalyzeApiRequest) Reset()         { *m = AnalyzeApiRequest{} }
func (m *AnalyzeApiRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzeApiRequest) ProtoMessage()    {}
func (*AnalyzeApiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyze_78a955174000f281, []int{0}
}
func (m *AnalyzeApiRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeApiRequest.Unmarshal(m, b)
}
func (m *AnalyzeApiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeApiRequest.Marshal(b, m, deterministic)
}
func (dst *AnalyzeApiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeApiRequest.Merge(dst, src)
}
func (m *AnalyzeApiRequest) XXX_Size() int {
	return xxx_messageInfo_AnalyzeApiRequest.Size(m)
}
func (m *AnalyzeApiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeApiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeApiRequest proto.InternalMessageInfo

func (m *AnalyzeApiRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AnalyzeApiRequest) GetAnalyzeTemplateId() string {
	if m != nil {
		return m.AnalyzeTemplateId
	}
	return ""
}

func (m *AnalyzeApiRequest) GetAnalyzeTemplate() *AnalyzeTemplate {
	if m != nil {
		return m.AnalyzeTemplate
	}
	return nil
}

func (m *AnalyzeApiRequest) GetResultsScoreThreshold() float32 {
	if m != nil {
		return m.ResultsScoreThreshold
	}
	return 0
}

// AnalyzeRequest represents the request to the analyze service via GRPC
type AnalyzeRequest struct {
	// The text to analyze
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The analyze template, which configures which sensitive data should be analyzed
	AnalyzeTemplate      *AnalyzeTemplate `protobuf:"bytes,2,opt,name=analyzeTemplate,proto3" json:"analyzeTemplate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *AnalyzeRequest) Reset()         { *m = AnalyzeRequest{} }
func (m *AnalyzeRequest) String() string { return proto.CompactTextString(m) }
func (*AnalyzeRequest) ProtoMessage()    {}
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyze_78a955174000f281, []int{1}
}
func (m *AnalyzeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeRequest.Unmarshal(m, b)
}
func (m *AnalyzeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeRequest.Marshal(b, m, deterministic)
}
func (dst *AnalyzeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeRequest.Merge(dst, src)
}
func (m *AnalyzeRequest) XXX_Size() int {
	return xxx_messageInfo_AnalyzeRequest.Size(m)
}
func (m *AnalyzeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeRequest proto.InternalMessageInfo

func (m *AnalyzeRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AnalyzeRequest) GetAnalyzeTemplate() *AnalyzeTemplate {
	if m != nil {
		return m.AnalyzeTemplate
	}
	return nil
}

// AnalyzeResponse represents the analyze service response
type AnalyzeResponse struct {
	// Array of the analyze results finding
	AnalyzeResults []*AnalyzeResult `protobuf:"bytes,1,rep,name=analyzeResults,proto3" json:"analyzeResults,omitempty"`
	// The assigned analysis request id, can be used to correlate logs
	RequestId            string   `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzeResponse) Reset()         { *m = AnalyzeResponse{} }
func (m *AnalyzeResponse) String() string { return proto.CompactTextString(m) }
func (*AnalyzeResponse) ProtoMessage()    {}
func (*AnalyzeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_analyze_78a955174000f281, []int{2}
}
func (m *AnalyzeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeResponse.Unmarshal(m, b)
}
func (m *AnalyzeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeResponse.Marshal(b, m, deterministic)
}
func (dst *AnalyzeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeResponse.Merge(dst, src)
}
func (m *AnalyzeResponse) XXX_Size() int {
	return xxx_messageInfo_AnalyzeResponse.Size(m)
}
func (m *AnalyzeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeResponse proto.InternalMessageInfo

func (m *AnalyzeResponse) GetAnalyzeResults() []*AnalyzeResult {
	if m != nil {
		return m.AnalyzeResults
	}
	return nil
}

func (m *AnalyzeResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func init() {
	proto.RegisterType((*AnalyzeApiRequest)(nil), "types.AnalyzeApiRequest")
	proto.RegisterType((*AnalyzeRequest)(nil), "types.AnalyzeRequest")
	proto.RegisterType((*AnalyzeResponse)(nil), "types.AnalyzeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnalyzeServiceClient is the client API for AnalyzeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnalyzeServiceClient interface {
	// Apply method will execute on the given request and return the analyze response with the sensitive text findings
	Apply(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error)
}

type analyzeServiceClient struct {
	cc *grpc.ClientConn
}

func NewAnalyzeServiceClient(cc *grpc.ClientConn) AnalyzeServiceClient {
	return &analyzeServiceClient{cc}
}

func (c *analyzeServiceClient) Apply(ctx context.Context, in *AnalyzeRequest, opts ...grpc.CallOption) (*AnalyzeResponse, error) {
	out := new(AnalyzeResponse)
	err := c.cc.Invoke(ctx, "/types.AnalyzeService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyzeServiceServer is the server API for AnalyzeService service.
type AnalyzeServiceServer interface {
	// Apply method will execute on the given request and return the analyze response with the sensitive text findings
	Apply(context.Context, *AnalyzeRequest) (*AnalyzeResponse, error)
}

func RegisterAnalyzeServiceServer(s *grpc.Server, srv AnalyzeServiceServer) {
	s.RegisterService(&_AnalyzeService_serviceDesc, srv)
}

func _AnalyzeService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyzeServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.AnalyzeService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyzeServiceServer).Apply(ctx, req.(*AnalyzeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalyzeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.AnalyzeService",
	HandlerType: (*AnalyzeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _AnalyzeService_Apply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analyze.proto",
}

func init() { proto.RegisterFile("analyze.proto", fileDescriptor_analyze_78a955174000f281) }

var fileDescriptor_analyze_78a955174000f281 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4f, 0x4f, 0x83, 0x40,
	0x10, 0xc5, 0xdd, 0xfe, 0x31, 0xe9, 0x54, 0x69, 0x3a, 0xb1, 0x0d, 0x21, 0x1e, 0x08, 0x27, 0x0e,
	0x86, 0x03, 0x7a, 0xf0, 0xe0, 0x41, 0x8e, 0x7a, 0xdc, 0xf6, 0x0b, 0x20, 0x1d, 0xd3, 0x26, 0x0b,
	0xbb, 0xee, 0x6e, 0x8d, 0xf8, 0x1d, 0xfd, 0x4e, 0xc6, 0x85, 0x60, 0x4a, 0x1b, 0x13, 0x6f, 0xe4,
	0xbd, 0x37, 0x6f, 0x7e, 0xc3, 0xc2, 0x65, 0x5e, 0xe5, 0xa2, 0xfe, 0xa4, 0x44, 0x69, 0x69, 0x25,
	0x8e, 0x6d, 0xad, 0xc8, 0x04, 0x17, 0x85, 0x2c, 0x4b, 0x59, 0x35, 0x62, 0xe0, 0x59, 0x2a, 0x95,
	0xc8, 0x6d, 0x1b, 0x8a, 0xbe, 0x18, 0xcc, 0xb3, 0x66, 0x2c, 0x53, 0x3b, 0x4e, 0x6f, 0x7b, 0x32,
	0x16, 0x11, 0x46, 0x96, 0x3e, 0xac, 0xcf, 0x42, 0x16, 0x4f, 0xb8, 0xfb, 0xc6, 0x1b, 0x98, 0xb7,
	0xfd, 0xeb, 0xb6, 0xe2, 0x69, 0xe3, 0x0f, 0x5c, 0xe0, 0xd8, 0xc0, 0x47, 0x98, 0xf5, 0x44, 0x7f,
	0x18, 0xb2, 0x78, 0x9a, 0x2e, 0x13, 0x87, 0x95, 0x64, 0x87, 0x2e, 0xef, 0xc7, 0xf1, 0x0e, 0x16,
	0x9a, 0xcc, 0x5e, 0x58, 0xb3, 0x2a, 0xa4, 0xa6, 0xf5, 0x56, 0x93, 0xd9, 0x4a, 0xb1, 0xf1, 0x47,
	0x21, 0x8b, 0x07, 0xfc, 0xb4, 0x19, 0xbd, 0x82, 0xd7, 0x36, 0xff, 0x75, 0xcb, 0x09, 0xba, 0xc1,
	0xbf, 0xe8, 0xa2, 0x12, 0x66, 0xdd, 0x1e, 0xa3, 0x64, 0x65, 0x08, 0x1f, 0xc0, 0xcb, 0x3b, 0xe9,
	0x07, 0xcd, 0x67, 0xe1, 0x30, 0x9e, 0xa6, 0x57, 0x87, 0x9d, 0x8d, 0xc9, 0x7b, 0x59, 0xbc, 0x86,
	0x89, 0x6e, 0x88, 0xbb, 0xdf, 0xfa, 0x2b, 0xa4, 0xcf, 0xdd, 0x59, 0x2b, 0xd2, 0xef, 0xbb, 0x82,
	0xf0, 0x1e, 0xc6, 0x99, 0x52, 0xa2, 0xc6, 0x45, 0xbf, 0xde, 0xcd, 0x04, 0xcb, 0xa3, 0xad, 0x8e,
	0x32, 0x3a, 0x7b, 0x39, 0x77, 0x2f, 0x7f, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x57, 0xe5, 0x0f,
	0x36, 0x2f, 0x02, 0x00, 0x00,
}
