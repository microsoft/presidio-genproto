// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FieldTypeNames int32

const (
	FieldTypeNames_CREDIT_CARD   FieldTypeNames = 0
	FieldTypeNames_CRYPTO        FieldTypeNames = 1
	FieldTypeNames_DATE_TIME     FieldTypeNames = 2
	FieldTypeNames_DOMAIN_NAME   FieldTypeNames = 3
	FieldTypeNames_EMAIL_ADDRESS FieldTypeNames = 4
	FieldTypeNames_IBAN_CODE     FieldTypeNames = 5
	FieldTypeNames_IP_ADDRESS    FieldTypeNames = 6
	FieldTypeNames_NRP           FieldTypeNames = 7
	FieldTypeNames_LOCATION      FieldTypeNames = 8
	FieldTypeNames_PERSON        FieldTypeNames = 9
	FieldTypeNames_PHONE_NUMBER  FieldTypeNames = 10
)

var FieldTypeNames_name = map[int32]string{
	0:  "CREDIT_CARD",
	1:  "CRYPTO",
	2:  "DATE_TIME",
	3:  "DOMAIN_NAME",
	4:  "EMAIL_ADDRESS",
	5:  "IBAN_CODE",
	6:  "IP_ADDRESS",
	7:  "NRP",
	8:  "LOCATION",
	9:  "PERSON",
	10: "PHONE_NUMBER",
}
var FieldTypeNames_value = map[string]int32{
	"CREDIT_CARD":   0,
	"CRYPTO":        1,
	"DATE_TIME":     2,
	"DOMAIN_NAME":   3,
	"EMAIL_ADDRESS": 4,
	"IBAN_CODE":     5,
	"IP_ADDRESS":    6,
	"NRP":           7,
	"LOCATION":      8,
	"PERSON":        9,
	"PHONE_NUMBER":  10,
}

func (x FieldTypeNames) String() string {
	return proto.EnumName(FieldTypeNames_name, int32(x))
}
func (FieldTypeNames) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_common_80a7eda822d31204, []int{0}
}

type FieldType struct {
	Name                 FieldTypeNames `protobuf:"varint,1,opt,name=name,enum=types.FieldTypeNames" json:"name,omitempty"`
	LanguageCode         string         `protobuf:"bytes,2,opt,name=languageCode" json:"languageCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *FieldType) Reset()         { *m = FieldType{} }
func (m *FieldType) String() string { return proto.CompactTextString(m) }
func (*FieldType) ProtoMessage()    {}
func (*FieldType) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_80a7eda822d31204, []int{0}
}
func (m *FieldType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldType.Unmarshal(m, b)
}
func (m *FieldType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldType.Marshal(b, m, deterministic)
}
func (dst *FieldType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldType.Merge(dst, src)
}
func (m *FieldType) XXX_Size() int {
	return xxx_messageInfo_FieldType.Size(m)
}
func (m *FieldType) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldType.DiscardUnknown(m)
}

var xxx_messageInfo_FieldType proto.InternalMessageInfo

func (m *FieldType) GetName() FieldTypeNames {
	if m != nil {
		return m.Name
	}
	return FieldTypeNames_CREDIT_CARD
}

func (m *FieldType) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

type AnalyzeResult struct {
	Text                 string    `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	FieldType            string    `protobuf:"bytes,2,opt,name=fieldType" json:"fieldType,omitempty"`
	Probability          float32   `protobuf:"fixed32,3,opt,name=probability" json:"probability,omitempty"`
	Location             *Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AnalyzeResult) Reset()         { *m = AnalyzeResult{} }
func (m *AnalyzeResult) String() string { return proto.CompactTextString(m) }
func (*AnalyzeResult) ProtoMessage()    {}
func (*AnalyzeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_80a7eda822d31204, []int{1}
}
func (m *AnalyzeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeResult.Unmarshal(m, b)
}
func (m *AnalyzeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeResult.Marshal(b, m, deterministic)
}
func (dst *AnalyzeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeResult.Merge(dst, src)
}
func (m *AnalyzeResult) XXX_Size() int {
	return xxx_messageInfo_AnalyzeResult.Size(m)
}
func (m *AnalyzeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeResult.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeResult proto.InternalMessageInfo

func (m *AnalyzeResult) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AnalyzeResult) GetFieldType() string {
	if m != nil {
		return m.FieldType
	}
	return ""
}

func (m *AnalyzeResult) GetProbability() float32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

func (m *AnalyzeResult) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type Location struct {
	Start                int32    `protobuf:"zigzag32,1,opt,name=start" json:"start,omitempty"`
	End                  int32    `protobuf:"zigzag32,2,opt,name=end" json:"end,omitempty"`
	Length               int32    `protobuf:"zigzag32,3,opt,name=length" json:"length,omitempty"`
	NewStart             int32    `protobuf:"zigzag32,4,opt,name=newStart" json:"newStart,omitempty"`
	NewEnd               int32    `protobuf:"zigzag32,5,opt,name=newEnd" json:"newEnd,omitempty"`
	NewLength            int32    `protobuf:"zigzag32,6,opt,name=newLength" json:"newLength,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_common_80a7eda822d31204, []int{2}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Location.Unmarshal(m, b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Location.Marshal(b, m, deterministic)
}
func (dst *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(dst, src)
}
func (m *Location) XXX_Size() int {
	return xxx_messageInfo_Location.Size(m)
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Location) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Location) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Location) GetNewStart() int32 {
	if m != nil {
		return m.NewStart
	}
	return 0
}

func (m *Location) GetNewEnd() int32 {
	if m != nil {
		return m.NewEnd
	}
	return 0
}

func (m *Location) GetNewLength() int32 {
	if m != nil {
		return m.NewLength
	}
	return 0
}

func init() {
	proto.RegisterType((*FieldType)(nil), "types.FieldType")
	proto.RegisterType((*AnalyzeResult)(nil), "types.AnalyzeResult")
	proto.RegisterType((*Location)(nil), "types.Location")
	proto.RegisterEnum("types.FieldTypeNames", FieldTypeNames_name, FieldTypeNames_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_common_80a7eda822d31204) }

var fileDescriptor_common_80a7eda822d31204 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xdd, 0x8e, 0xd2, 0x40,
	0x14, 0xb6, 0x50, 0xba, 0xed, 0xe1, 0x67, 0x87, 0x13, 0x35, 0x8d, 0xf1, 0xa2, 0xe1, 0x0a, 0x35,
	0xe1, 0x62, 0x7d, 0x82, 0xd9, 0x76, 0x8c, 0x4d, 0xe8, 0xb4, 0x19, 0xea, 0x85, 0xde, 0x34, 0x65,
	0x19, 0x91, 0xa4, 0x4c, 0x09, 0xcc, 0x06, 0xf1, 0x29, 0x7c, 0x00, 0x1f, 0xc3, 0x07, 0x34, 0x9d,
	0xb2, 0xac, 0xdc, 0x9d, 0xef, 0xe7, 0x9c, 0xef, 0x6b, 0x33, 0x30, 0x78, 0xa8, 0xb7, 0xdb, 0x5a,
	0xcd, 0x76, 0xfb, 0x5a, 0xd7, 0xd8, 0xd3, 0xa7, 0x9d, 0x3c, 0x4c, 0xbe, 0x81, 0xf7, 0x69, 0x23,
	0xab, 0x55, 0x7e, 0xda, 0x49, 0x7c, 0x07, 0xb6, 0x2a, 0xb7, 0xd2, 0xb7, 0x02, 0x6b, 0x3a, 0xba,
	0x7b, 0x35, 0x33, 0x96, 0xd9, 0x45, 0xe7, 0xe5, 0x56, 0x1e, 0x84, 0xb1, 0xe0, 0x04, 0x06, 0x55,
	0xa9, 0xd6, 0x8f, 0xe5, 0x5a, 0x86, 0xf5, 0x4a, 0xfa, 0x9d, 0xc0, 0x9a, 0x7a, 0xe2, 0x8a, 0x9b,
	0xfc, 0xb6, 0x60, 0x48, 0x55, 0x59, 0x9d, 0x7e, 0x49, 0x21, 0x0f, 0x8f, 0x95, 0x46, 0x04, 0x5b,
	0xcb, 0x9f, 0xda, 0x04, 0x78, 0xc2, 0xcc, 0xf8, 0x16, 0xbc, 0xef, 0x4f, 0x09, 0xe7, 0x33, 0xcf,
	0x04, 0x06, 0xd0, 0xdf, 0xed, 0xeb, 0x65, 0xb9, 0xdc, 0x54, 0x1b, 0x7d, 0xf2, 0xbb, 0x81, 0x35,
	0xed, 0x88, 0xff, 0x29, 0xfc, 0x00, 0x6e, 0x55, 0x3f, 0x94, 0x7a, 0x53, 0x2b, 0xdf, 0x0e, 0xac,
	0x69, 0xff, 0xee, 0xf6, 0x5c, 0x7c, 0x7e, 0xa6, 0xc5, 0xc5, 0x30, 0xf9, 0x63, 0x81, 0xfb, 0x44,
	0xe3, 0x4b, 0xe8, 0x1d, 0x74, 0xb9, 0x6f, 0xeb, 0x8c, 0x45, 0x0b, 0x90, 0x40, 0x57, 0xaa, 0x95,
	0x69, 0x32, 0x16, 0xcd, 0x88, 0xaf, 0xc1, 0xa9, 0xa4, 0x5a, 0xeb, 0x1f, 0x26, 0x7e, 0x2c, 0xce,
	0x08, 0xdf, 0x80, 0xab, 0xe4, 0x71, 0x61, 0x4e, 0xd8, 0x46, 0xb9, 0xe0, 0x66, 0x47, 0xc9, 0x23,
	0x53, 0x2b, 0xbf, 0xd7, 0xee, 0xb4, 0xa8, 0xf9, 0x5a, 0x25, 0x8f, 0xf3, 0xf6, 0x9c, 0x63, 0xa4,
	0x67, 0xe2, 0xfd, 0x5f, 0x0b, 0x46, 0xd7, 0xbf, 0x1b, 0x6f, 0xa1, 0x1f, 0x0a, 0x16, 0xc5, 0x79,
	0x11, 0x52, 0x11, 0x91, 0x17, 0x08, 0xe0, 0x84, 0xe2, 0x6b, 0x96, 0xa7, 0xc4, 0xc2, 0x21, 0x78,
	0x11, 0xcd, 0x59, 0x91, 0xc7, 0x09, 0x23, 0x9d, 0xc6, 0x1b, 0xa5, 0x09, 0x8d, 0x79, 0xc1, 0x69,
	0xc2, 0x48, 0x17, 0xc7, 0x30, 0x64, 0x09, 0x8d, 0xe7, 0x05, 0x8d, 0x22, 0xc1, 0x16, 0x0b, 0x62,
	0x37, 0x2b, 0xf1, 0x3d, 0xe5, 0x45, 0x98, 0x46, 0x8c, 0xf4, 0x70, 0x04, 0x10, 0x67, 0x17, 0xd9,
	0xc1, 0x1b, 0xe8, 0x72, 0x91, 0x91, 0x1b, 0x1c, 0x80, 0x3b, 0x4f, 0x43, 0x9a, 0xc7, 0x29, 0x27,
	0x6e, 0x13, 0x9a, 0x31, 0xb1, 0x48, 0x39, 0xf1, 0x90, 0xc0, 0x20, 0xfb, 0x9c, 0x72, 0x56, 0xf0,
	0x2f, 0xc9, 0x3d, 0x13, 0x04, 0x96, 0x8e, 0x79, 0x52, 0x1f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x97, 0x4c, 0xa5, 0x41, 0x62, 0x02, 0x00, 0x00,
}
