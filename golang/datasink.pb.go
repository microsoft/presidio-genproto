// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datasink.proto

package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The data sink supported destenation types
type DatasinkTypesEnum int32

const (
	DatasinkTypesEnum_mysql         DatasinkTypesEnum = 0
	DatasinkTypesEnum_mssql         DatasinkTypesEnum = 1
	DatasinkTypesEnum_postgres      DatasinkTypesEnum = 2
	DatasinkTypesEnum_sqlite3       DatasinkTypesEnum = 3
	DatasinkTypesEnum_oracle        DatasinkTypesEnum = 4
	DatasinkTypesEnum_kafka         DatasinkTypesEnum = 5
	DatasinkTypesEnum_eventhub      DatasinkTypesEnum = 6
	DatasinkTypesEnum_s3            DatasinkTypesEnum = 7
	DatasinkTypesEnum_azureblob     DatasinkTypesEnum = 8
	DatasinkTypesEnum_googlestorage DatasinkTypesEnum = 9
)

var DatasinkTypesEnum_name = map[int32]string{
	0: "mysql",
	1: "mssql",
	2: "postgres",
	3: "sqlite3",
	4: "oracle",
	5: "kafka",
	6: "eventhub",
	7: "s3",
	8: "azureblob",
	9: "googlestorage",
}
var DatasinkTypesEnum_value = map[string]int32{
	"mysql":         0,
	"mssql":         1,
	"postgres":      2,
	"sqlite3":       3,
	"oracle":        4,
	"kafka":         5,
	"eventhub":      6,
	"s3":            7,
	"azureblob":     8,
	"googlestorage": 9,
}

func (x DatasinkTypesEnum) String() string {
	return proto.EnumName(DatasinkTypesEnum_name, int32(x))
}
func (DatasinkTypesEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_datasink_c702f296f043822e, []int{0}
}

// DatasinkRequest represents the request to the data-sink service via GRPC
type DatasinkRequest struct {
	// Array of the analyzed results
	AnalyzeResults []*AnalyzeResult `protobuf:"bytes,1,rep,name=analyzeResults,proto3" json:"analyzeResults,omitempty"`
	// The anonymized text
	AnonymizeResult *AnonymizeResponse `protobuf:"bytes,2,opt,name=anonymizeResult,proto3" json:"anonymizeResult,omitempty"`
	// The path where the anonymized text is located
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasinkRequest) Reset()         { *m = DatasinkRequest{} }
func (m *DatasinkRequest) String() string { return proto.CompactTextString(m) }
func (*DatasinkRequest) ProtoMessage()    {}
func (*DatasinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datasink_c702f296f043822e, []int{0}
}
func (m *DatasinkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasinkRequest.Unmarshal(m, b)
}
func (m *DatasinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasinkRequest.Marshal(b, m, deterministic)
}
func (dst *DatasinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasinkRequest.Merge(dst, src)
}
func (m *DatasinkRequest) XXX_Size() int {
	return xxx_messageInfo_DatasinkRequest.Size(m)
}
func (m *DatasinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DatasinkRequest proto.InternalMessageInfo

func (m *DatasinkRequest) GetAnalyzeResults() []*AnalyzeResult {
	if m != nil {
		return m.AnalyzeResults
	}
	return nil
}

func (m *DatasinkRequest) GetAnonymizeResult() *AnonymizeResponse {
	if m != nil {
		return m.AnonymizeResult
	}
	return nil
}

func (m *DatasinkRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// DatasinkResponse represents the response from the data-sink service via GRPC
type DatasinkResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatasinkResponse) Reset()         { *m = DatasinkResponse{} }
func (m *DatasinkResponse) String() string { return proto.CompactTextString(m) }
func (*DatasinkResponse) ProtoMessage()    {}
func (*DatasinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datasink_c702f296f043822e, []int{1}
}
func (m *DatasinkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatasinkResponse.Unmarshal(m, b)
}
func (m *DatasinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatasinkResponse.Marshal(b, m, deterministic)
}
func (dst *DatasinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatasinkResponse.Merge(dst, src)
}
func (m *DatasinkResponse) XXX_Size() int {
	return xxx_messageInfo_DatasinkResponse.Size(m)
}
func (m *DatasinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DatasinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DatasinkResponse proto.InternalMessageInfo

// CompletionMessage represents an indication to the data sink service that the scanning job is done service via GRPC
type CompletionMessage struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CompletionMessage) Reset()         { *m = CompletionMessage{} }
func (m *CompletionMessage) String() string { return proto.CompactTextString(m) }
func (*CompletionMessage) ProtoMessage()    {}
func (*CompletionMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_datasink_c702f296f043822e, []int{2}
}
func (m *CompletionMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompletionMessage.Unmarshal(m, b)
}
func (m *CompletionMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompletionMessage.Marshal(b, m, deterministic)
}
func (dst *CompletionMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompletionMessage.Merge(dst, src)
}
func (m *CompletionMessage) XXX_Size() int {
	return xxx_messageInfo_CompletionMessage.Size(m)
}
func (m *CompletionMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CompletionMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CompletionMessage proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DatasinkRequest)(nil), "types.DatasinkRequest")
	proto.RegisterType((*DatasinkResponse)(nil), "types.DatasinkResponse")
	proto.RegisterType((*CompletionMessage)(nil), "types.CompletionMessage")
	proto.RegisterEnum("types.DatasinkTypesEnum", DatasinkTypesEnum_name, DatasinkTypesEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatasinkServiceClient is the client API for DatasinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatasinkServiceClient interface {
	// Apply method will execute on the given request and return whether the result where written successfully to the destination
	Apply(ctx context.Context, in *DatasinkRequest, opts ...grpc.CallOption) (*DatasinkResponse, error)
	// Init the data sink service with the provided data sink template
	Init(ctx context.Context, in *DatasinkTemplate, opts ...grpc.CallOption) (*DatasinkResponse, error)
	// Completion method for indicating that the scanning job is done
	Completion(ctx context.Context, in *CompletionMessage, opts ...grpc.CallOption) (*DatasinkResponse, error)
}

type datasinkServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatasinkServiceClient(cc *grpc.ClientConn) DatasinkServiceClient {
	return &datasinkServiceClient{cc}
}

func (c *datasinkServiceClient) Apply(ctx context.Context, in *DatasinkRequest, opts ...grpc.CallOption) (*DatasinkResponse, error) {
	out := new(DatasinkResponse)
	err := c.cc.Invoke(ctx, "/types.DatasinkService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasinkServiceClient) Init(ctx context.Context, in *DatasinkTemplate, opts ...grpc.CallOption) (*DatasinkResponse, error) {
	out := new(DatasinkResponse)
	err := c.cc.Invoke(ctx, "/types.DatasinkService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasinkServiceClient) Completion(ctx context.Context, in *CompletionMessage, opts ...grpc.CallOption) (*DatasinkResponse, error) {
	out := new(DatasinkResponse)
	err := c.cc.Invoke(ctx, "/types.DatasinkService/Completion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasinkServiceServer is the server API for DatasinkService service.
type DatasinkServiceServer interface {
	// Apply method will execute on the given request and return whether the result where written successfully to the destination
	Apply(context.Context, *DatasinkRequest) (*DatasinkResponse, error)
	// Init the data sink service with the provided data sink template
	Init(context.Context, *DatasinkTemplate) (*DatasinkResponse, error)
	// Completion method for indicating that the scanning job is done
	Completion(context.Context, *CompletionMessage) (*DatasinkResponse, error)
}

func RegisterDatasinkServiceServer(s *grpc.Server, srv DatasinkServiceServer) {
	s.RegisterService(&_DatasinkService_serviceDesc, srv)
}

func _DatasinkService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasinkServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.DatasinkService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasinkServiceServer).Apply(ctx, req.(*DatasinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasinkService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatasinkTemplate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasinkServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.DatasinkService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasinkServiceServer).Init(ctx, req.(*DatasinkTemplate))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasinkService_Completion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasinkServiceServer).Completion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.DatasinkService/Completion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasinkServiceServer).Completion(ctx, req.(*CompletionMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatasinkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.DatasinkService",
	HandlerType: (*DatasinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _DatasinkService_Apply_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _DatasinkService_Init_Handler,
		},
		{
			MethodName: "Completion",
			Handler:    _DatasinkService_Completion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datasink.proto",
}

func init() { proto.RegisterFile("datasink.proto", fileDescriptor_datasink_c702f296f043822e) }

var fileDescriptor_datasink_c702f296f043822e = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0xae, 0xda, 0x30,
	0x10, 0xc6, 0x5f, 0x80, 0xe4, 0xbd, 0x0c, 0x0f, 0x30, 0xd3, 0xaa, 0x8d, 0x58, 0x21, 0x56, 0xa8,
	0x0b, 0x16, 0xb0, 0x43, 0xdd, 0xd0, 0x3f, 0x8b, 0x2e, 0xba, 0x49, 0xb9, 0x80, 0x43, 0xa7, 0x21,
	0xc2, 0xb1, 0x4d, 0xec, 0x20, 0x85, 0x6b, 0xf4, 0x10, 0xbd, 0x4c, 0x0f, 0x55, 0x25, 0x84, 0x06,
	0x05, 0x89, 0xdd, 0xf8, 0x9b, 0xf9, 0xcd, 0xd8, 0xdf, 0x18, 0x86, 0x3f, 0xb9, 0xe5, 0x26, 0x91,
	0x87, 0x85, 0xce, 0x94, 0x55, 0xe8, 0xda, 0x42, 0x93, 0x99, 0xbc, 0xee, 0x54, 0x9a, 0x2a, 0x79,
	0x11, 0x27, 0x43, 0x4b, 0xa9, 0x16, 0xdc, 0x52, 0x7d, 0x1e, 0x71, 0xa9, 0x64, 0x91, 0x26, 0xe7,
	0x5a, 0x98, 0xfd, 0x71, 0x60, 0xf4, 0xa5, 0x6e, 0x14, 0xd2, 0x31, 0x27, 0x63, 0xf1, 0x23, 0x0c,
	0xb9, 0xe4, 0xa2, 0x38, 0x53, 0x48, 0x26, 0x17, 0xd6, 0x04, 0xce, 0xb4, 0x3b, 0xef, 0x2f, 0xdf,
	0x2e, 0xaa, 0x11, 0x8b, 0xcd, 0x6d, 0x32, 0x6c, 0xd5, 0xe2, 0x27, 0x68, 0x86, 0x5c, 0xb4, 0xa0,
	0x33, 0x75, 0xe6, 0xfd, 0x65, 0xf0, 0x1f, 0x6f, 0xb2, 0x5a, 0x49, 0x43, 0x61, 0x1b, 0x40, 0x84,
	0x9e, 0xe6, 0x76, 0x1f, 0x74, 0xa7, 0xce, 0xdc, 0x0f, 0xab, 0x78, 0x86, 0xc0, 0x9a, 0x8b, 0x5e,
	0xc0, 0xd9, 0x1b, 0x18, 0x7f, 0x56, 0xa9, 0x16, 0x64, 0x13, 0x25, 0xbf, 0x93, 0x31, 0x3c, 0xa6,
	0x0f, 0xbf, 0x1d, 0x18, 0x5f, 0x2b, 0xb7, 0xe5, 0xc4, 0xaf, 0x32, 0x4f, 0xd1, 0x07, 0x37, 0x2d,
	0xcc, 0x51, 0xb0, 0xa7, 0x2a, 0x34, 0x65, 0xe8, 0xe0, 0x2b, 0xbc, 0x68, 0x65, 0x6c, 0x9c, 0x91,
	0x61, 0x1d, 0xec, 0xc3, 0xb3, 0x39, 0x8a, 0xc4, 0xd2, 0x8a, 0x75, 0x11, 0xc0, 0x53, 0x19, 0xdf,
	0x09, 0x62, 0xbd, 0x92, 0x38, 0xf0, 0x5f, 0x07, 0xce, 0xdc, 0x92, 0xa0, 0x13, 0x49, 0xbb, 0xcf,
	0x23, 0xe6, 0xa1, 0x07, 0x1d, 0xb3, 0x62, 0xcf, 0x38, 0x00, 0x9f, 0x9f, 0xf3, 0x8c, 0x22, 0xa1,
	0x22, 0xf6, 0x82, 0x63, 0x18, 0xc4, 0x4a, 0xc5, 0x82, 0x8c, 0x55, 0x19, 0x8f, 0x89, 0xf9, 0xcb,
	0xbf, 0x37, 0x46, 0xff, 0xa0, 0xec, 0x94, 0xec, 0x08, 0xd7, 0xe0, 0x6e, 0xb4, 0x16, 0x05, 0xbe,
	0xab, 0xad, 0x69, 0x6d, 0x62, 0xf2, 0xfe, 0x4e, 0xaf, 0x1f, 0xfe, 0x84, 0x6b, 0xe8, 0x7d, 0x93,
	0x89, 0xc5, 0x76, 0xc9, 0xb6, 0x5e, 0xf8, 0x23, 0x76, 0x03, 0xd0, 0xd8, 0x86, 0xd7, 0xbd, 0xdc,
	0x39, 0xf9, 0xa0, 0x45, 0xe4, 0x55, 0xdf, 0x67, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x63, 0x8e,
	0x68, 0xa0, 0x86, 0x02, 0x00, 0x00,
}
